const Big = require('big.js');

Big.DP = 1004; // 设置Big.js的精度

var results = [];
console.log(getP(1000).toString());
// 0.3854497524124816359103324431893139996231671379936081129174383900956154754297911942715784382052656133733170412885759335901218602818457063237308169559383426261043958668169906629356523278889999508869850681640950594075429557506086541357680134905744059679245022354055348096181375093306885450817625975991957447724973697303682093053320025226529618895121118303216346551247229045302286904761836610011741326756113063909853973970625467928230836129669052106580210946781082049075901845101786536648508717273289305872630097610763714032146890118601870301274271801660480806542686802950176764093225270147671654794684840592841348391874327773359104354777299521641373989305579823173762887778360794693399378813103890318355267148080577522416201913495854783973990017784168283645041038447261842318409059416253750151424486387190283054162372799865682502413519911288868159111110561378534754885639398119305531261525016866666202683133284022694206845845222134985007340053439085168421798636463615483904732172959484159946441650390625
function getP(n) {
  n = parseInt(n) || 0;
  if (n < 10) {
    return Big(0);
  } else if (n === 10) {
    return Big(0.5).pow(10);
  } else {
    if (results[n] !== undefined) {
      return results[n];
    } else {
      var temp = getP(n - 1).plus(Big(1).minus(getP(n - 11)).div(Big(2).pow(11)));
      results[n] = temp;
      return temp;
    }
  }
}

var matrix = [
  [Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0.5), Big(0)],
  [Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(0), Big(0)],
  [Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0.5), Big(1)]
]

function mySum(a, b) {
  a = a.map((v, i) => v.times(b[i]))
  return a.reduce((x, y) => x.plus(y), Big(0))
}

function repeat(n) {
  n = parseInt(n) || 0
  var state = [Big(1), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0), Big(0)]
  for (let i = 0; i < n; i++) {
    var copy = state.slice()
    state = state.map((_, index) => mySum(copy, matrix[index]))
  }
  return state
}

console.log(repeat(1000)[10].toString())
// 0.3854497524124816359103324431893139996231671379936081129174383900956154754297911942715784382052656133733170412885759335901218602818457063237308169559383426261043958668169906629356523278889999508869850681640950594075429557506086541357680134905744059679245022354055348096181375093306885450817625975991957447724973697303682093053320025226529618895121118303216346551247229045302286904761836610011741326756113063909853973970625467928230836129669052106580210946781082049075901845101786536648508717273289305872630097610763714032146890118601870301274271801660480806542686802950176764093225270147671654794684840592841348391874327773359104354777299521641373989305579823173762887778360794693399378813103890318355267148080577522416201913495854783973990017784168283645041038447261842318409059416253750151424486387190283054162372799865682502413519911288868159111110561378534754885639398119305531261525016866666202683133284022694206845845222134985007340053439085168421798636463615483904732172959484159946441650390625
